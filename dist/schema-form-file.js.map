/**
 * angular-schema-form-nwp-file-upload - Upload file type for Angular Schema Form
 * @version v0.1.5
 * @link https://github.com/saburab/angular-schema-form-nwp-file-upload
 * @license MIT
 */
{"version":3,"sources":["schema-form-file.js","templates.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;8EC7OA;AACA;AACA;AACA","file":"schema-form-file.js","sourcesContent":["'use strict';\n\nangular\n  .module('schemaForm')\n  .config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', 'sfBuilderProvider',\n    function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider, sfBuilderProvider) {\n      var _defaultSingleFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is '\n      };\n      var _defaultMultiFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is ',\n        'minItems': 'You have to upload at least one file',\n        'maxItems': 'You can\\'t upload more than one file.'\n      };\n\n      function _applyDefaultValidationErrorMessages (form, schema, messagesObject) {\n        form.validationMessage = form.validationMessage || {};\n        for (var keyword in messagesObject) {\n          if (schema[keyword] && !form.validationMessage[keyword]) {\n            form.validationMessage[keyword] = messagesObject[keyword];\n          }\n        }\n      }\n\n      function registerDefaultTypes () {\n        function nwpSinglefileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'object' && schema.format === 'singlefile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultSingleFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        function nwpMultifileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'array' && schema.format === 'multifile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultMultiFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        schemaFormProvider.defaults.array.unshift(nwpSinglefileUploadDefaultProvider);\n        schemaFormProvider.defaults.array.unshift(nwpMultifileUploadDefaultProvider);\n      }\n\n      registerDefaultTypes();\n\n      schemaFormDecoratorsProvider.defineAddOn(\n            'bootstrapDecorator',\n            'nwpFileUpload',\n            'directives/decorators/bootstrap/nwp-file/schema-form-file.html',\n            // defaults\n            sfBuilderProvider.stdBuilders\n        );\n    }\n  ]);\n\nangular\n.module('ngSchemaFormFile', [\n  'ngFileUpload',\n  'ngMessages'\n])\n.controller('ngSchemaFileController', ['$scope', 'Upload', '$timeout', '$q', function ($scope, Upload, $timeout, $q) {\n  var vm = this;\n\n  var scope = null,\n    ngModel = null;\n\n  vm.init = init;\n\n  function init (_ngModel_) {\n    ngModel = _ngModel_;\n    scope = $scope;\n\n    scope.url = scope.form && scope.form.endpoint;\n    scope.isSinglefileUpload = scope.form && scope.form.schema && scope.form.schema.format === 'singlefile';\n\n    scope.selectFile = function (file) {\n      if (!file) {\n        return;\n      }\n      scope.picFile = file;\n\n      if (scope.$$prevSibling && scope.$$prevSibling.form && scope.$$prevSibling.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        toggleValidationFileMetadataComponents(true);\n        var expr = \"evalExpr('\" + scope.fieldToWatch + \"',{ model: model, 'arrayIndex': 0, 'modelValue': ''})\";\n        scope.removeWatchForRequireMetadata = scope.$watch(expr, function (value) {\n          if (!value) {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, false);\n          } else {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, true);\n          }\n        });\n      }\n    };\n\n    scope.selectFiles = function (files) {\n      scope.picFiles = files;\n    };\n\n    scope.uploadFile = function (file) {\n      file && doUpload(file);\n    };\n\n    scope.uploadFiles = function (files) {\n      files.length && angular.forEach(files, function (file) {\n        doUpload(file);\n      });\n    };\n\n    // kelin: handler for the remove action.\n    // TODO: Need to communicate with server for deletion if the file is already uploaded.\n    scope.removeFile = function () {\n      if (scope.isSinglefileUpload) {\n        if (scope.picFile && scope.picFile.result) {  // Already uploaded file, remove the whole file object including file metadatas\n          ngModel.$setViewValue();\n          ngModel.$commitViewValue();\n        }\n\n        scope.picFile = null;\n\n        if (scope.removeWatchForRequireMetadata) {\n          scope.removeWatchForRequireMetadata();\n          delete scope.removeWatchForRequireMetadata;\n          scope.$broadcast('schemaForm.error.' + scope.form.key.join('.'), 'requireMetadata', true);\n          toggleValidationFileMetadataComponents(false);\n        }\n      } else {}\n    };\n\n    function doUpload (file) {\n      if (file && !file.$error && scope.url) {\n        file.upload = Upload.upload({\n          url: scope.url,\n          file: file,\n          data: {metadata: ngModel.$modelValue}\n        });\n\n        file.upload.then(function (response) {\n          $timeout(function () {\n            file.result = response.data;\n          });\n          if (ngModel.$modelValue) {\n            ngModel.$setViewValue(angular.merge(ngModel.$modelValue, response.data));\n          } else {\n            ngModel.$setViewValue(response.data);\n          }\n          ngModel.$commitViewValue();\n\n          var saveFormAfterUploaded = scope.form && scope.form.saveFormAfterUploaded;\n          if (saveFormAfterUploaded) {\n            scope.$emit('rdsSchemaFormCtrl.save', {\n              source: 'ngSchemaFile',\n              file: file,\n              form: scope.form\n            });\n          }\n        }, function (response) {\n          if (response.status > 0) {\n            scope.errorMsg = response.status + ': ' + response.data;\n          }\n        });\n\n        file.upload.progress(function (evt) {\n          file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\n        });\n      }\n    }\n\n    scope.validateField = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        // console.log('singlefile-form is invalid');\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        // console.log('multifile-form is  invalid');\n      } else {\n        // console.log('single- and multifile-form are valid');\n      }\n    };\n\n    scope.submit = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        scope.uploadFile(scope.picFile);\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        scope.uploadFiles(scope.picFiles);\n      }\n    };\n\n    scope.$on('schemaFormValidate', scope.validateField);\n    scope.$on('schemaFormFileUploadSubmit', scope.submit);\n\n    function toggleValidationFileMetadataComponents (required) {\n      var fieldToWatch = '';\n      var next = scope.$$prevSibling;\n      while (next && next.form && next.form.key && next.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        next.form.required = required;\n        next.$broadcast('schemaFormValidate');\n        fieldToWatch += 'model.' + next.form.key.join('.') + '&&';\n        next = next.$$prevSibling;\n      }\n      if (fieldToWatch.length > 0) {\n        fieldToWatch = fieldToWatch.substring(0, fieldToWatch.length - 2);\n      }\n      scope.fieldToWatch = fieldToWatch;\n    }\n  }\n\n  $scope.initInternalModel = function (model) {\n    if (model && model.type && model.name) {\n      $scope.picFile = {};\n      $scope.picFile.result = model;\n      $scope.picFile.name = model.name;\n      $scope.picFile.progress = 100;\n      $scope.picFile.size = 0;\n      $scope.picFile.type = model.type;\n    }\n  };\n}])\n.directive('ngSchemaFile', function () {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: 'ngSchemaFileController',\n    controllerAs: 'fileUploadCtrl',\n    require: 'ngModel',\n    link: function (scope, element, attrs, ngModel) {\n      scope.fileUploadCtrl.init(ngModel);\n    }\n  };\n});\n",null]}