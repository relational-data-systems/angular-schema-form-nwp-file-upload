/**
 * angular-schema-form-nwp-file-upload - Upload file type for Angular Schema Form
 * @version v0.1.5
 * @link https://github.com/saburab/angular-schema-form-nwp-file-upload
 * @license MIT
 */
"use strict";angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider","sfBuilderProvider",function(e,r,i,a){var l="Wrong file type. Allowed types are ",n="This file is too large. Maximum size allowed is ",t="Current file size:",s="You have to upload at least one file",o="You can't upload more than one file.",m=function(r,a,m){if("array"===a.type&&"singlefile"===a.format){a.pattern&&a.pattern.mimeType&&!a.pattern.validationMessage&&(a.pattern.validationMessage=l),a.maxSize&&a.maxSize.maximum&&!a.maxSize.validationMessage&&(a.maxSize.validationMessage=n,a.maxSize.validationMessage2=t),a.minItems&&a.minItems.minimum&&!a.minItems.validationMessage&&(a.minItems.validationMessage=s),a.maxItems&&a.maxItems.maximum&&!a.maxItems.validationMessage&&(a.maxItems.validationMessage=o);var d=e.stdFormObj(r,a,m);return d.key=m.path,d.type="nwpFileUpload",m.lookup[i.stringify(m.path)]=d,d}};e.defaults.array.unshift(m);var d=function(r,a,m){if("array"===a.type&&"multifile"===a.format){a.pattern&&a.pattern.mimeType&&!a.pattern.validationMessage&&(a.pattern.validationMessage=l),a.maxSize&&a.maxSize.maximum&&!a.maxSize.validationMessage&&(a.maxSize.validationMessage=n,a.maxSize.validationMessage2=t),a.minItems&&a.minItems.minimum&&!a.minItems.validationMessage&&(a.minItems.validationMessage=s),a.maxItems&&a.maxItems.maximum&&!a.maxItems.validationMessage&&(a.maxItems.validationMessage=o);var d=e.stdFormObj(r,a,m);return d.key=m.path,d.type="nwpFileUpload",m.lookup[i.stringify(m.path)]=d,d}};e.defaults.array.unshift(d);var p=a.builders.ngModelOptions,c=a.builders.ngModel,u=a.builders.sfField,f=a.builders.condition,g=a.builders.complexValidation,F=[u,c,p,f,g];r.defineAddOn("bootstrapDecorator","nwpFileUpload","directives/decorators/bootstrap/nwp-file/nwp-file.html",F)}]),angular.module("ngSchemaFormFile",["ngFileUpload","ngMessages"]).controller("ngSchemaFileController",["$scope",function(e){e.initInternalModel=function(r){r&&r.type&&r.name&&(e.picFile={},e.picFile.result=r,e.picFile.name=r.name,e.picFile.progress=100,e.picFile.size=0,e.picFile.type=r.type)}}]).directive("ngSchemaFile",["Upload","$timeout","$q",function(e,r,i){return{restrict:"A",scope:!0,controller:"ngSchemaFileController",require:"ngModel",link:function(i,a,l,n){function t(a){a&&!a.$error&&i.url&&(a.upload=e.upload({url:i.url,file:a,data:{metadata:n.$modelValue}}),a.upload.then(function(e){r(function(){a.result=e.data}),n.$modelValue?n.$setViewValue(angular.merge(n.$modelValue,e.data)):n.$setViewValue(e.data),n.$commitViewValue()},function(e){e.status>0&&(i.errorMsg=e.status+": "+e.data)}),a.upload.progress(function(e){a.progress=Math.min(100,parseInt(100*e.loaded/e.total))}))}function s(e){for(var r="",a=i.$$prevSibling;a&&a.form&&a.form.key&&a.form.key.join(".").startsWith(i.form.key.join("."));)a.form.required=e,a.$broadcast("schemaFormValidate"),r+="model."+a.form.key.join(".")+"&&",a=a.$$prevSibling;r.length>0&&(r=r.substring(0,r.length-2)),i.fieldToWatch=r}i.url=i.form&&i.form.endpoint,i.isSinglefileUpload=i.form&&i.form.schema&&"singlefile"===i.form.schema.format,i.selectFile=function(e){if(e&&(i.picFile=e,i.$$prevSibling&&i.$$prevSibling.form&&i.$$prevSibling.form.key.join(".").startsWith(i.form.key.join(".")))){s(!0);var r="evalExpr('"+i.fieldToWatch+"',{ model: model, 'arrayIndex': 0, 'modelValue': ''})";i.removeWatchForRequireMetadata=i.$watch(r,function(e){e?i.$broadcast("schemaForm.error."+i.form.key.join("."),"requireMetadata",!0):i.$broadcast("schemaForm.error."+i.form.key.join("."),"requireMetadata")})}},i.selectFiles=function(e){i.picFiles=e},i.uploadFile=function(e){e&&t(e)},i.uploadFiles=function(e){e.length&&angular.forEach(e,function(e){t(e)})},i.removeFile=function(){i.isSinglefileUpload&&(i.picFile&&i.picFile.result&&(n.$setViewValue(),n.$commitViewValue()),i.picFile=null,i.removeWatchForRequireMetadata&&(i.removeWatchForRequireMetadata(),delete i.removeWatchForRequireMetadata,i.$broadcast("schemaForm.error."+i.form.key.join("."),"requireMetadata",!0),s(!1)))},i.validateField=function(){i.uploadForm.file&&i.uploadForm.file.$valid&&i.picFile&&!i.picFile.$error||i.uploadForm.files&&i.uploadForm.files.$valid&&i.picFiles&&!i.picFiles.$error},i.submit=function(){i.uploadForm.file&&i.uploadForm.file.$valid&&i.picFile&&!i.picFile.$error?i.uploadFile(i.picFile):i.uploadForm.files&&i.uploadForm.files.$valid&&i.picFiles&&!i.picFiles.$error&&i.uploadFiles(i.picFiles)},i.$on("schemaFormValidate",i.validateField),i.$on("schemaFormFileUploadSubmit",i.submit)}}}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/nwp-file/nwp-file.html",'<ng-form class="file-upload mb-lg" ng-schema-file schema-validate="form" sf-field-model="replaceAll" ng-init="initInternalModel($$value$$)" ng-model="$$value$$" name="uploadForm">\r\n   <label ng-show="form.title && form.notitle !== true" class="control-label" for="fileInputButton" ng-class="{\'sr-only\': !showTitle(), \'text-danger\': uploadForm.$error.required && !uploadForm.$pristine}">\r\n      {{ form.title }}<i ng-show="form.required">&nbsp;*</i>\r\n   </label>\r\n\r\n   <div ng-show="picFile" class="well well-sm bg-white mb" ng-class="{\'has-error border-danger\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}">\r\n      <div ng-include="\'uploadProcess.html\'" class="mb"></div>\r\n\t  <span class="help-block" sf-message="form.description"></span>\r\n   </div>\r\n\r\n   <ul ng-show="picFiles && picFiles.length" class="list-group">\r\n      <li class="list-group-item" ng-repeat="picFile in picFiles">\r\n         <div ng-include="\'uploadProcess.html\'"></div>\r\n      </li>\r\n   </ul>\r\n\r\n   <div ng-show="(isSinglefileUpload && !picFile) || (!isSinglefileUpload && (!picFiles || !picFiles.length))" class="well well-sm bg-white mb" ng-class="{\'has-error border-danger\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}">\r\n      <small class="text-muted" ng-show="form.description" ng-bind-html="form.description"></small>\r\n      <div ng-if="isSinglefileUpload" ng-include="\'singleFileUpload.html\'"></div>\r\n      <div ng-if="!isSinglefileUpload" ng-include="\'multiFileUpload.html\'"></div>\r\n      <!--<div class="help-block mb0" ng-show="uploadForm.$error.required && !uploadForm.$pristine">{{ \'modules.attribute.fields.required.caption\' | translate }}</div>-->\r\n      <span class="help-block" sf-message="form.description"></span>\r\n   </div>\r\n</ng-form>\r\n\r\n<script type=\'text/ng-template\' id="uploadProcess.html">\r\n   <div class="row mb">\r\n      <div class="col-sm-4 mb-sm">\r\n         <label title="{{ \'modules.upload.field.preview\' | translate }}" class="text-info">{{\r\n            \'modules.upload.field.preview\' | translate }}</label>\r\n         <img ngf-src="picFile" class="img-thumbnail img-responsive">\r\n         <div class="img-placeholder"\r\n              ng-class="{\'show\': picFile.$invalid && !picFile.blobUrl, \'hide\': !picFile || picFile.blobUrl}">No preview\r\n            available\r\n         </div>\r\n      </div>\r\n      <div class="col-sm-4 mb-sm">\r\n         <label title="{{ \'modules.upload.field.filename\' | translate }}" class="text-info">{{\r\n            \'modules.upload.field.filename\' | translate }}</label>\r\n         <div class="filename" title="{{ picFile.name }}">{{ picFile.name }}</div>\r\n      </div>\r\n      <div class="col-sm-4 mb-sm">\r\n         <label title="{{ \'modules.upload.field.progress\' | translate }}" class="text-info">{{\r\n            \'modules.upload.field.progress\' | translate }}</label>\r\n         <div class="progress">\r\n            <div class="progress-bar progress-bar-striped" role="progressbar"\r\n                 ng-class="{\'progress-bar-success\': picFile.progress == 100}"\r\n                 ng-style="{width: picFile.progress + \'%\'}">\r\n               {{ picFile.progress }} %\r\n            </div>\r\n         </div>\r\n         <button class="btn btn-primary btn-sm" type="button" ng-click="uploadFile(picFile)"\r\n                 ng-disabled="ngModel.$error.requireMetadata||!picFile || picFile.result || picFile.$error">{{ !picFile.result ?  "buttons.upload" : "buttons.uploaded" | translate }}\r\n         </button>\r\n         <button class="btn btn-danger btn-sm" type="button" ng-click="removeFile(picFile)"\r\n                 ng-disabled="!picFile || picFile.$error">{{ "buttons.remove" | translate }}\r\n         </button>\r\n      </div>\r\n   </div>\r\n   <div ng-messages="uploadForm.$error" ng-messages-multiple="">\r\n      <div class="text-danger errorMsg" ng-message="maxSize">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong>. ({{ form.schema[picFile.$error].validationMessage2 | translate }} <strong>{{picFile.size / 1000000|number:1}}MB</strong>)</div>\r\n      <div class="text-danger errorMsg" ng-message="pattern">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div>\r\n      <div class="text-danger errorMsg" ng-message="maxItems">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div>\r\n      <div class="text-danger errorMsg" ng-message="minItems">{{ form.schema[picFile.$error].validationMessage | translate }} <strong>{{picFile.$errorParam}}</strong></div>\r\n      <div class="text-danger errorMsg" ng-show="errorMsg">{{errorMsg}}</div>\r\n   </div>\r\n</script>\r\n\r\n<script type=\'text/ng-template\' id="singleFileUpload.html">\r\n   <div ngf-drop="selectFile(picFile)" ngf-select="selectFile(picFile)" type="file" ngf-multiple="false"\r\n        ng-model="picFile" name="file"\r\n        ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n        ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n        ng-required="form.required"\r\n        accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\r\n        ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription">\r\n      <p class="text-center">{{ \'modules.upload.descriptionSinglefile\' | translate }}</p>\r\n   </div>\r\n   <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div>\r\n\r\n   <button ngf-select="selectFile(picFile)" type="file" ngf-multiple="false" ng-model="picFile" name="file"\r\n           ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n           ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n           ng-required="form.required"\r\n           accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\r\n           ng-model-options="form.ngModelOptions" id="fileInputButton"\r\n           class="btn btn-primary btn-block {{form.htmlClass}} mt-lg mb">\r\n      <fa fw="fw" name="upload" class="mr-sm"></fa>\r\n      {{ "buttons.add" | translate }}\r\n   </button>\r\n</script>\r\n\r\n<script type=\'text/ng-template\' id="multiFileUpload.html">\r\n   <div ngf-drop="selectFiles(picFiles)" ngf-select="selectFiles(picFiles)" type="file" ngf-multiple="true"\r\n        ng-model="picFiles" name="files"\r\n        ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n        ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n        ng-required="form.required"\r\n        accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\r\n        ng-model-options="form.ngModelOptions" ngf-drag-over-class="dragover" class="drop-box dragAndDropDescription">\r\n      <p class="text-center">{{ \'modules.upload.descriptionMultifile\' | translate }}</p>\r\n   </div>\r\n   <div ngf-no-file-drop>{{ \'modules.upload.dndNotSupported\' | translate}}</div>\r\n\r\n   <button ngf-select="selectFiles(picFiles)" type="file" ngf-multiple="true" multiple ng-model="picFiles" name="files"\r\n           accept="{{form.schema.pattern && form.schema.pattern.mimeType}}"\r\n           ng-attr-ngf-pattern="{{form.schema.pattern && form.schema.pattern.mimeType ? form.schema.pattern.mimeType : undefined }}"\r\n           ng-attr-ngf-max-size="{{form.schema.maxSize && form.schema.maxSize.maximum ? form.schema.maxSize.maximum : undefined }}"\r\n           ng-required="form.required"\r\n           ng-model-options="form.ngModelOptions" id="fileInputButton"\r\n           class="btn btn-primary btn-block {{form.htmlClass}} mt-lg mb">\r\n      <fa fw="fw" name="upload" class="mr-sm"></fa>\r\n      {{ "buttons.add" | translate }}\r\n   </button>\r\n</script>\r\n')}]);