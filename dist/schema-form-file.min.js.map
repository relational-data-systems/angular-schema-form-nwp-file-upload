/**
 * angular-schema-form-nwp-file-upload - Upload file type for Angular Schema Form
 * @version v0.1.5
 * @link https://github.com/saburab/angular-schema-form-nwp-file-upload
 * @license MIT
 */
{"version":3,"sources":["schema-form-file.js","schema-form-file.min.js","templates.js"],"names":["angular","module","config","schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider","sfBuilderProvider","_applyDefaultValidationErrorMessages","form","schema","messagesObject","validationMessage","keyword","registerDefaultTypes","nwpSinglefileUploadDefaultProvider","name","options","type","format","f","stdFormObj","key","path","lookup","stringify","_defaultSingleFileUploadValidationErrorMessages","nwpMultifileUploadDefaultProvider","_defaultMultiFileUploadValidationErrorMessages","defaults","array","unshift","mimeType","maxSize","minItems","maxItems","defineAddOn","stdBuilders","controller","$scope","Upload","$timeout","$q","init","_ngModel_","doUpload","file","$error","scope","url","upload","data","metadata","ngModel","$modelValue","then","response","result","$setViewValue","merge","$commitViewValue","saveFormAfterUploaded","$emit","source","status","errorMsg","progress","evt","Math","min","parseInt","loaded","total","toggleValidationFileMetadataComponents","required","fieldToWatch","next","$$prevSibling","join","startsWith","$broadcast","length","substring","endpoint","isSinglefileUpload","selectFile","picFile","expr","removeWatchForRequireMetadata","$watch","value","getModelPath","selectFiles","files","picFiles","uploadFile","uploadFiles","forEach","removeFile","validateField","uploadForm","$valid","submit","$on","vm","this","initInternalModel","model","size","directive","restrict","controllerAs","require","link","element","attrs","fileUploadCtrl","run","$templateCache","put"],"mappings":"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","file":"schema-form-file.min.js","sourcesContent":["'use strict';\n\nangular\n  .module('schemaForm')\n  .config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', 'sfBuilderProvider',\n    function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider, sfBuilderProvider) {\n      var _defaultSingleFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is '\n      };\n      var _defaultMultiFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is ',\n        'minItems': 'You have to upload at least one file',\n        'maxItems': 'You can\\'t upload more than one file.'\n      };\n\n      function _applyDefaultValidationErrorMessages (form, schema, messagesObject) {\n        form.validationMessage = form.validationMessage || {};\n        for (var keyword in messagesObject) {\n          if (schema[keyword] && !form.validationMessage[keyword]) {\n            form.validationMessage[keyword] = messagesObject[keyword];\n          }\n        }\n      }\n\n      function registerDefaultTypes () {\n        function nwpSinglefileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'object' && schema.format === 'singlefile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultSingleFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        function nwpMultifileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'array' && schema.format === 'multifile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultMultiFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        schemaFormProvider.defaults.array.unshift(nwpSinglefileUploadDefaultProvider);\n        schemaFormProvider.defaults.array.unshift(nwpMultifileUploadDefaultProvider);\n      }\n\n      registerDefaultTypes();\n\n      schemaFormDecoratorsProvider.defineAddOn(\n            'bootstrapDecorator',\n            'nwpFileUpload',\n            'directives/decorators/bootstrap/nwp-file/schema-form-file.html',\n            // defaults\n            sfBuilderProvider.stdBuilders\n        );\n    }\n  ]);\n\nangular\n.module('ngSchemaFormFile', [\n  'ngFileUpload',\n  'ngMessages'\n])\n.controller('ngSchemaFileController', ['$scope', 'Upload', '$timeout', '$q', function ($scope, Upload, $timeout, $q) {\n  var vm = this;\n\n  var scope = null,\n    ngModel = null;\n\n  vm.init = init;\n\n  function init (_ngModel_) {\n    ngModel = _ngModel_;\n    scope = $scope;\n\n    scope.url = scope.form && scope.form.endpoint;\n    scope.isSinglefileUpload = scope.form && scope.form.schema && scope.form.schema.format === 'singlefile';\n\n    scope.selectFile = function (file) {\n      if (!file) {\n        return;\n      }\n      scope.picFile = file;\n\n      if (scope.$$prevSibling && scope.$$prevSibling.form && scope.$$prevSibling.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        toggleValidationFileMetadataComponents(true);\n        var expr = \"evalExpr('\" + scope.fieldToWatch + \"',{ model: model, 'arrayIndex': 0, 'modelValue': ''})\";\n        scope.removeWatchForRequireMetadata = scope.$watch(expr, function (value) {\n          if (!value) {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, false);\n          } else {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, true);\n          }\n        });\n      }\n    };\n\n    scope.selectFiles = function (files) {\n      scope.picFiles = files;\n    };\n\n    scope.uploadFile = function (file) {\n      file && doUpload(file);\n    };\n\n    scope.uploadFiles = function (files) {\n      files.length && angular.forEach(files, function (file) {\n        doUpload(file);\n      });\n    };\n\n    // kelin: handler for the remove action.\n    // TODO: Need to communicate with server for deletion if the file is already uploaded.\n    scope.removeFile = function () {\n      if (scope.isSinglefileUpload) {\n        if (scope.picFile && scope.picFile.result) {  // Already uploaded file, remove the whole file object including file metadatas\n          ngModel.$setViewValue();\n          ngModel.$commitViewValue();\n        }\n\n        scope.picFile = null;\n\n        if (scope.removeWatchForRequireMetadata) {\n          scope.removeWatchForRequireMetadata();\n          delete scope.removeWatchForRequireMetadata;\n          scope.$broadcast('schemaForm.error.' + scope.form.key.join('.'), 'requireMetadata', true);\n          toggleValidationFileMetadataComponents(false);\n        }\n      } else {}\n    };\n\n    function doUpload (file) {\n      if (file && !file.$error && scope.url) {\n        file.upload = Upload.upload({\n          url: scope.url,\n          file: file,\n          data: {metadata: ngModel.$modelValue}\n        });\n\n        file.upload.then(function (response) {\n          $timeout(function () {\n            file.result = response.data;\n          });\n          if (ngModel.$modelValue) {\n            ngModel.$setViewValue(angular.merge(ngModel.$modelValue, response.data));\n          } else {\n            ngModel.$setViewValue(response.data);\n          }\n          ngModel.$commitViewValue();\n\n          var saveFormAfterUploaded = scope.form && scope.form.saveFormAfterUploaded;\n          if (saveFormAfterUploaded) {\n            scope.$emit('rdsSchemaFormCtrl.save', {\n              source: 'ngSchemaFile',\n              file: file,\n              form: scope.form\n            });\n          }\n        }, function (response) {\n          if (response.status > 0) {\n            scope.errorMsg = response.status + ': ' + response.data;\n          }\n        });\n\n        file.upload.progress(function (evt) {\n          file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\n        });\n      }\n    }\n\n    scope.validateField = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        // console.log('singlefile-form is invalid');\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        // console.log('multifile-form is  invalid');\n      } else {\n        // console.log('single- and multifile-form are valid');\n      }\n    };\n\n    scope.submit = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        scope.uploadFile(scope.picFile);\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        scope.uploadFiles(scope.picFiles);\n      }\n    };\n\n    scope.$on('schemaFormValidate', scope.validateField);\n    scope.$on('schemaFormFileUploadSubmit', scope.submit);\n\n    function toggleValidationFileMetadataComponents (required) {\n      var fieldToWatch = '';\n      var next = scope.$$prevSibling;\n      while (next && next.form && next.form.key && next.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        next.form.required = required;\n        next.$broadcast('schemaFormValidate');\n        fieldToWatch += 'model.' + next.form.key.join('.') + '&&';\n        next = next.$$prevSibling;\n      }\n      if (fieldToWatch.length > 0) {\n        fieldToWatch = fieldToWatch.substring(0, fieldToWatch.length - 2);\n      }\n      scope.fieldToWatch = fieldToWatch;\n    }\n  }\n\n  $scope.initInternalModel = function (model) {\n    if (model && model.type && model.name) {\n      $scope.picFile = {};\n      $scope.picFile.result = model;\n      $scope.picFile.name = model.name;\n      $scope.picFile.progress = 100;\n      $scope.picFile.size = 0;\n      $scope.picFile.type = model.type;\n    }\n  };\n}])\n.directive('ngSchemaFile', function () {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: 'ngSchemaFileController',\n    controllerAs: 'fileUploadCtrl',\n    require: 'ngModel',\n    link: function (scope, element, attrs, ngModel) {\n      scope.fileUploadCtrl.init(ngModel);\n    }\n  };\n});\n","'use strict';\n\nangular\n  .module('schemaForm')\n  .config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', 'sfBuilderProvider',\n    function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider, sfBuilderProvider) {\n      var _defaultSingleFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is '\n      };\n      var _defaultMultiFileUploadValidationErrorMessages = {\n        'mimeType': 'Wrong file type. Allowed types are ',\n        'maxSize': 'This file is too large. Maximum size allowed is ',\n        'minItems': 'You have to upload at least one file',\n        'maxItems': 'You can\\'t upload more than one file.'\n      };\n\n      function _applyDefaultValidationErrorMessages (form, schema, messagesObject) {\n        form.validationMessage = form.validationMessage || {};\n        for (var keyword in messagesObject) {\n          if (schema[keyword] && !form.validationMessage[keyword]) {\n            form.validationMessage[keyword] = messagesObject[keyword];\n          }\n        }\n      }\n\n      function registerDefaultTypes () {\n        function nwpSinglefileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'object' && schema.format === 'singlefile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultSingleFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        function nwpMultifileUploadDefaultProvider (name, schema, options) {\n          if (schema.type === 'array' && schema.format === 'multifile') {\n            var f = schemaFormProvider.stdFormObj(name, schema, options);\n            f.key = options.path;\n            f.type = 'nwpFileUpload';\n            options.lookup[sfPathProvider.stringify(options.path)] = f;\n            _applyDefaultValidationErrorMessages(f, schema, _defaultMultiFileUploadValidationErrorMessages);\n            return f;\n          }\n        }\n\n        schemaFormProvider.defaults.array.unshift(nwpSinglefileUploadDefaultProvider);\n        schemaFormProvider.defaults.array.unshift(nwpMultifileUploadDefaultProvider);\n      }\n\n      registerDefaultTypes();\n\n      schemaFormDecoratorsProvider.defineAddOn(\n            'bootstrapDecorator',\n            'nwpFileUpload',\n            'directives/decorators/bootstrap/nwp-file/schema-form-file.html',\n            // defaults\n            sfBuilderProvider.stdBuilders\n        );\n    }\n  ]);\n\nangular\n.module('ngSchemaFormFile', [\n  'ngFileUpload',\n  'ngMessages'\n])\n.controller('ngSchemaFileController', ['$scope', 'Upload', '$timeout', '$q', function ($scope, Upload, $timeout, $q) {\n  var vm = this;\n\n  var scope = null,\n    ngModel = null;\n\n  vm.init = init;\n\n  function init (_ngModel_) {\n    ngModel = _ngModel_;\n    scope = $scope;\n\n    scope.url = scope.form && scope.form.endpoint;\n    scope.isSinglefileUpload = scope.form && scope.form.schema && scope.form.schema.format === 'singlefile';\n\n    scope.selectFile = function (file) {\n      if (!file) {\n        return;\n      }\n      scope.picFile = file;\n\n      if (scope.$$prevSibling && scope.$$prevSibling.form && scope.$$prevSibling.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        toggleValidationFileMetadataComponents(true);\n        var expr = \"evalExpr('\" + scope.fieldToWatch + \"',{ model: model, 'arrayIndex': 0, 'modelValue': ''})\";\n        scope.removeWatchForRequireMetadata = scope.$watch(expr, function (value) {\n          if (!value) {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, false);\n          } else {\n            scope.$broadcast('schemaForm.error.' + scope.getModelPath().join('.'), 'requireMetadata', null, true);\n          }\n        });\n      }\n    };\n\n    scope.selectFiles = function (files) {\n      scope.picFiles = files;\n    };\n\n    scope.uploadFile = function (file) {\n      file && doUpload(file);\n    };\n\n    scope.uploadFiles = function (files) {\n      files.length && angular.forEach(files, function (file) {\n        doUpload(file);\n      });\n    };\n\n    // kelin: handler for the remove action.\n    // TODO: Need to communicate with server for deletion if the file is already uploaded.\n    scope.removeFile = function () {\n      if (scope.isSinglefileUpload) {\n        if (scope.picFile && scope.picFile.result) {  // Already uploaded file, remove the whole file object including file metadatas\n          ngModel.$setViewValue();\n          ngModel.$commitViewValue();\n        }\n\n        scope.picFile = null;\n\n        if (scope.removeWatchForRequireMetadata) {\n          scope.removeWatchForRequireMetadata();\n          delete scope.removeWatchForRequireMetadata;\n          scope.$broadcast('schemaForm.error.' + scope.form.key.join('.'), 'requireMetadata', true);\n          toggleValidationFileMetadataComponents(false);\n        }\n      } else {}\n    };\n\n    function doUpload (file) {\n      if (file && !file.$error && scope.url) {\n        file.upload = Upload.upload({\n          url: scope.url,\n          file: file,\n          data: {metadata: ngModel.$modelValue}\n        });\n\n        file.upload.then(function (response) {\n          $timeout(function () {\n            file.result = response.data;\n          });\n          if (ngModel.$modelValue) {\n            ngModel.$setViewValue(angular.merge(ngModel.$modelValue, response.data));\n          } else {\n            ngModel.$setViewValue(response.data);\n          }\n          ngModel.$commitViewValue();\n\n          var saveFormAfterUploaded = scope.form && scope.form.saveFormAfterUploaded;\n          if (saveFormAfterUploaded) {\n            scope.$emit('rdsSchemaFormCtrl.save', {\n              source: 'ngSchemaFile',\n              file: file,\n              form: scope.form\n            });\n          }\n        }, function (response) {\n          if (response.status > 0) {\n            scope.errorMsg = response.status + ': ' + response.data;\n          }\n        });\n\n        file.upload.progress(function (evt) {\n          file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));\n        });\n      }\n    }\n\n    scope.validateField = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        // console.log('singlefile-form is invalid');\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        // console.log('multifile-form is  invalid');\n      } else {\n        // console.log('single- and multifile-form are valid');\n      }\n    };\n\n    scope.submit = function () {\n      if (scope.uploadForm.file && scope.uploadForm.file.$valid && scope.picFile && !scope.picFile.$error) {\n        scope.uploadFile(scope.picFile);\n      } else if (scope.uploadForm.files && scope.uploadForm.files.$valid && scope.picFiles && !scope.picFiles.$error) {\n        scope.uploadFiles(scope.picFiles);\n      }\n    };\n\n    scope.$on('schemaFormValidate', scope.validateField);\n    scope.$on('schemaFormFileUploadSubmit', scope.submit);\n\n    function toggleValidationFileMetadataComponents (required) {\n      var fieldToWatch = '';\n      var next = scope.$$prevSibling;\n      while (next && next.form && next.form.key && next.form.key.join('.').startsWith(scope.form.key.join('.'))) {\n        next.form.required = required;\n        next.$broadcast('schemaFormValidate');\n        fieldToWatch += 'model.' + next.form.key.join('.') + '&&';\n        next = next.$$prevSibling;\n      }\n      if (fieldToWatch.length > 0) {\n        fieldToWatch = fieldToWatch.substring(0, fieldToWatch.length - 2);\n      }\n      scope.fieldToWatch = fieldToWatch;\n    }\n  }\n\n  $scope.initInternalModel = function (model) {\n    if (model && model.type && model.name) {\n      $scope.picFile = {};\n      $scope.picFile.result = model;\n      $scope.picFile.name = model.name;\n      $scope.picFile.progress = 100;\n      $scope.picFile.size = 0;\n      $scope.picFile.type = model.type;\n    }\n  };\n}])\n.directive('ngSchemaFile', function () {\n  return {\n    restrict: 'A',\n    scope: true,\n    controller: 'ngSchemaFileController',\n    controllerAs: 'fileUploadCtrl',\n    require: 'ngModel',\n    link: function (scope, element, attrs, ngModel) {\n      scope.fileUploadCtrl.init(ngModel);\n    }\n  };\n});\n\nangular.module(\"schemaForm\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"directives/decorators/bootstrap/nwp-file/schema-form-file.html\",\"<ng-form class=\\\"file-upload mb-lg\\\" ng-schema-file schema-validate=\\\"form\\\" sf-field-model=\\\"replaceAll\\\" ng-init=\\\"initInternalModel($$value$$)\\\" ng-model=\\\"$$value$$\\\" name=\\\"uploadForm\\\">\\n  <label ng-show=\\\"form.title && form.notitle !== true\\\" class=\\\"control-label\\\" for=\\\"fileInputButton\\\" ng-class=\\\"{\\'sr-only\\': !showTitle(), \\'text-danger\\': uploadForm.$error.required && !uploadForm.$pristine}\\\">\\n    {{ form.title }}<i ng-show=\\\"form.required\\\">&nbsp;*</i>\\n  </label>\\n\\n  <div ng-show=\\\"picFile\\\" class=\\\"well well-sm bg-white mb\\\" ng-class=\\\"{\\'has-error border-danger\\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}\\\">\\n    <div ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.progress.html\\'\\\" class=\\\"mb\\\"></div>\\n    <div ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.errors.html\\'\\\" class=\\\"mb\\\"></div>\\n    <span class=\\\"help-block\\\" sf-message=\\\"form.description\\\"></span>\\n  </div>\\n\\n  <ul ng-show=\\\"picFiles && picFiles.length\\\" class=\\\"list-group\\\">\\n    <li class=\\\"list-group-item\\\" ng-repeat=\\\"picFile in picFiles\\\">\\n      <div ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.progress.html\\'\\\"></div>\\n      <div ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.errors.html\\'\\\" class=\\\"mb\\\"></div>\\n    </li>\\n  </ul>\\n\\n  <div ng-show=\\\"(isSinglefileUpload && !picFile) || (!isSinglefileUpload && (!picFiles || !picFiles.length))\\\" class=\\\"well well-sm bg-white mb\\\" ng-class=\\\"{\\'has-error border-danger\\': (uploadForm.$error.required && !uploadForm.$pristine) || (hasError() && errorMessage(schemaError()))}\\\">\\n    <small class=\\\"text-muted\\\" ng-show=\\\"form.description\\\" ng-bind-html=\\\"form.description\\\"></small>\\n    <div ng-if=\\\"isSinglefileUpload\\\" ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.single.html\\'\\\"></div>\\n    <div ng-if=\\\"!isSinglefileUpload\\\" ng-include=\\\"\\'directives/decorators/bootstrap/nwp-file/schema-form-file.template.multiple.html\\'\\\"></div>\\n    <!--<div class=\\\"help-block mb0\\\" ng-show=\\\"uploadForm.$error.required && !uploadForm.$pristine\\\">{{ \\'modules.attribute.fields.required.caption\\' | translate }}</div>-->\\n    <span class=\\\"help-block\\\" sf-message=\\\"form.description\\\"></span>\\n  </div>\\n</ng-form>\\n\");\n$templateCache.put(\"directives/decorators/bootstrap/nwp-file/schema-form-file.template.errors.html\",\"<div ng-messages=\\\"uploadForm.$error\\\" ng-messages-multiple=\\\"\\\">\\n  <div class=\\\"text-danger errorMsg\\\" ng-message=\\\"maxSize\\\">{{ form.validationMessage[picFile.$error] | translate }} <strong>{{picFile.$errorParam}}</strong>. (<strong>{{picFile.size / 1000000|number:1}}MB</strong>)</div>\\n  <div class=\\\"text-danger errorMsg\\\" ng-message=\\\"mimeType\\\">{{ form.validationMessage[picFile.$error] | translate }} <strong>{{picFile.$errorParam}}</strong></div>\\n  <div class=\\\"text-danger errorMsg\\\" ng-message=\\\"maxItems\\\">{{ form.validationMessage[picFile.$error] | translate }} <strong>{{picFile.$errorParam}}</strong></div>\\n  <div class=\\\"text-danger errorMsg\\\" ng-message=\\\"minItems\\\">{{ form.validationMessage[picFile.$error] | translate }} <strong>{{picFile.$errorParam}}</strong></div>\\n  <div class=\\\"text-danger errorMsg\\\" ng-show=\\\"errorMsg\\\">{{errorMsg}}</div>\\n</div>\");\n$templateCache.put(\"directives/decorators/bootstrap/nwp-file/schema-form-file.template.multiple.html\",\"<div ngf-drop=\\\"selectFiles(picFiles)\\\" ngf-select=\\\"selectFiles(picFiles)\\\" type=\\\"file\\\" ngf-multiple=\\\"true\\\"\\n    ng-model=\\\"picFiles\\\" name=\\\"files\\\"\\n    ng-attr-ngf-mimeType=\\\"{{form.schema.mimeType ? form.schema.mimeType : undefined }}\\\"\\n    ng-attr-ngf-max-size=\\\"{{form.schema.maxSize ? form.schema.maxSize : undefined }}\\\"\\n    ng-required=\\\"form.required\\\"\\n    accept=\\\"{{form.schema.mimeType}}\\\"\\n    ng-model-options=\\\"form.ngModelOptions\\\" ngf-drag-over-class=\\\"dragover\\\" class=\\\"drop-box dragAndDropDescription\\\">\\n  <p class=\\\"text-center\\\">{{ \\'modules.upload.descriptionMultifile\\' | translate }}</p>\\n</div>\\n<div ngf-no-file-drop>{{ \\'modules.upload.dndNotSupported\\' | translate}}</div>\\n\\n<button ngf-select=\\\"selectFiles(picFiles)\\\" type=\\\"file\\\" ngf-multiple=\\\"true\\\" multiple ng-model=\\\"picFiles\\\" name=\\\"files\\\"\\n       ng-attr-ngf-mimeType=\\\"{{form.schema.mimeType ? form.schema.mimeType : undefined }}\\\"\\n       ng-attr-ngf-max-size=\\\"{{form.schema.maxSize ? form.schema.maxSize : undefined }}\\\"\\n       ng-required=\\\"form.required\\\"\\n       accept=\\\"{{form.schema.mimeType}}\\\"\\n       ng-model-options=\\\"form.ngModelOptions\\\" id=\\\"fileInputButton\\\"\\n       class=\\\"btn btn-primary btn-block {{form.htmlClass}} mt-lg mb\\\">\\n  <fa fw=\\\"fw\\\" name=\\\"upload\\\" class=\\\"mr-sm\\\"></fa>\\n  {{ \\\"buttons.add\\\" | translate }}\\n</button>\\n\");\n$templateCache.put(\"directives/decorators/bootstrap/nwp-file/schema-form-file.template.progress.html\",\"<div class=\\\"row mb\\\">\\n  <div class=\\\"col-sm-4 mb-sm\\\">\\n     <label title=\\\"{{ \\'modules.upload.field.preview\\' | translate }}\\\" class=\\\"text-info\\\">{{\\n        \\'modules.upload.field.preview\\' | translate }}</label>\\n     <img ngf-src=\\\"picFile\\\" class=\\\"img-thumbnail img-responsive\\\">\\n     <div class=\\\"img-placeholder\\\"\\n          ng-class=\\\"{\\'show\\': picFile.$invalid && !picFile.blobUrl, \\'hide\\': !picFile || picFile.blobUrl}\\\">No preview\\n        available\\n     </div>\\n  </div>\\n  <div class=\\\"col-sm-4 mb-sm\\\">\\n     <label title=\\\"{{ \\'modules.upload.field.filename\\' | translate }}\\\" class=\\\"text-info\\\">{{\\n        \\'modules.upload.field.filename\\' | translate }}</label>\\n     <div class=\\\"filename\\\" title=\\\"{{ picFile.name }}\\\">{{ picFile.name }}</div>\\n  </div>\\n  <div class=\\\"col-sm-4 mb-sm\\\">\\n     <label title=\\\"{{ \\'modules.upload.field.progress\\' | translate }}\\\" class=\\\"text-info\\\">{{\\n        \\'modules.upload.field.progress\\' | translate }}</label>\\n     <div class=\\\"progress\\\">\\n        <div class=\\\"progress-bar progress-bar-striped\\\" role=\\\"progressbar\\\"\\n             ng-class=\\\"{\\'progress-bar-success\\': picFile.progress == 100}\\\"\\n             ng-style=\\\"{width: picFile.progress + \\'%\\'}\\\">\\n           {{ picFile.progress }} %\\n        </div>\\n     </div>\\n     <button class=\\\"btn btn-primary btn-sm\\\" type=\\\"button\\\" ng-click=\\\"uploadFile(picFile)\\\"\\n             ng-disabled=\\\"ngModel.$error.requireMetadata||!picFile || picFile.result || picFile.$error\\\">{{ !picFile.result ?  \\\"buttons.upload\\\" : \\\"buttons.uploaded\\\" | translate }}\\n     </button>\\n     <button class=\\\"btn btn-danger btn-sm\\\" type=\\\"button\\\" ng-click=\\\"removeFile(picFile)\\\"\\n             ng-disabled=\\\"!picFile\\\">{{ \\\"buttons.remove\\\" | translate }}\\n     </button>\\n  </div>\\n</div>\\n\");\n$templateCache.put(\"directives/decorators/bootstrap/nwp-file/schema-form-file.template.single.html\",\"<div ngf-drop=\\\"selectFile(picFile)\\\" ngf-select=\\\"selectFile(picFile)\\\" type=\\\"file\\\" ngf-multiple=\\\"false\\\"\\n    ng-model=\\\"picFile\\\" name=\\\"file\\\"\\n    ng-attr-ngf-mimeType=\\\"{{form.schema.mimeType ? form.schema.mimeType : undefined }}\\\"\\n    ng-attr-ngf-max-size=\\\"{{form.schema.maxSize ? form.schema.maxSize : undefined }}\\\"\\n    ng-required=\\\"form.required\\\"\\n    accept=\\\"{{form.schema.mimeType}}\\\"\\n    ng-model-options=\\\"form.ngModelOptions\\\" ngf-drag-over-class=\\\"dragover\\\" class=\\\"drop-box dragAndDropDescription\\\">\\n  <p class=\\\"text-center\\\">{{ \\'modules.upload.descriptionSinglefile\\' | translate }}</p>\\n</div>\\n<div ngf-no-file-drop>{{ \\'modules.upload.dndNotSupported\\' | translate}}</div>\\n\\n<button ngf-select=\\\"selectFile(picFile)\\\" type=\\\"file\\\" ngf-multiple=\\\"false\\\" ng-model=\\\"picFile\\\" name=\\\"file\\\"\\n       ng-attr-ngf-mimeType=\\\"{{form.schema.mimeType ? form.schema.mimeType : undefined }}\\\"\\n       ng-attr-ngf-max-size=\\\"{{form.schema.maxSize ? form.schema.maxSize : undefined }}\\\"\\n       ng-required=\\\"form.required\\\"\\n       accept=\\\"{{form.schema.mimeType}}\\\"\\n       ng-model-options=\\\"form.ngModelOptions\\\" id=\\\"fileInputButton\\\"\\n       class=\\\"btn btn-primary btn-block {{form.htmlClass}} mt-lg mb\\\">\\n  <fa fw=\\\"fw\\\" name=\\\"upload\\\" class=\\\"mr-sm\\\"></fa>\\n  {{ \\\"buttons.add\\\" | translate }}\\n</button>\\n\");}]);",null]}